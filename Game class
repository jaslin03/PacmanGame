package com.usf.cs112.pacman;

import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.lang.reflect.Method;

import javax.swing.Timer;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JProgressBar;


public class Game extends JFrame implements KeyListener, ActionListener {

	public final int WIDTH = 750;
	public final int HEIGHT = 710;
	public int pacmanUnit = 20;    //Size of pacman
	public int indexRemove;  //index of arraylist to be removed
	public int space = 15;  // Allows pacman to eat dot more easily.
	public double counter;  // counter for progressbar
	public double increment = 0.89;  //increment for progressbar. 100 % / number of dots
	private String direction ="";   //direction of pacman, controlled by keyboard.
	
	JLabel liveLabel = new JLabel();   //Create heart Icon for lives display;
	JLabel winLabel = new JLabel();   // Text display when you win
	JLabel gameLabel = new JLabel();   // Text display when yoy lose
	JLabel instruction = new JLabel();  // Disply the instruction and reminder for player

	Maze maze = new Maze();
	Dot dot = new Dot();
	Pacman pac = new Pacman();
	JProgressBar bar= new JProgressBar();
	ImageIcon heartIcon = new ImageIcon("heart1.png");
	Timer timer = new Timer(10, this);
	
	
	JLabel textJLabel;
	ImageIcon icon;   // Icon for pacman
	JLabel label;

	
	 Game(){
	  

      timer.start();
      icon = new ImageIcon("pacmanIcon.png");
      label = new JLabel();
      textJLabel = new JLabel();
     
      
      textJLabel.setForeground(Color.green);   //Setting the text
      textJLabel.setBounds(450, 100, 300,300);
      textJLabel.setFont(new Font("MV Boli",Font.PLAIN,28));
      label.setBounds(30, 30, pacmanUnit,pacmanUnit);  //Pacman's label
      label.setIcon(icon);   
      
      liveLabel.setIcon(heartIcon);
      liveLabel.setText(": "+pac.lives);
      liveLabel.setForeground(Color.red);
      liveLabel.setHorizontalAlignment(JLabel.CENTER);
      liveLabel.setFont(new Font("MV Boli",Font.PLAIN,28)) ;
      liveLabel.setBounds(50,100,300,300);
      
      winLabel.setForeground(Color.green);
      winLabel.setBounds(450, 400, 200,200);
      winLabel.setText("Level: 1");
      winLabel.setFont(new Font("MV Boli",Font.PLAIN,28)) ;
      
	  gameLabel.setForeground(Color.orange);
      gameLabel.setBounds(240,120,400,400);
      gameLabel.setFont(new Font("MV Boli",Font.PLAIN,50)) ;
      gameLabel.setText("");
      
      instruction.setForeground(Color.white);
      instruction.setBounds(80, 350, 300,300);
      instruction.setText("Ghost in the middle takes 3 lives...");
      
      bar.setValue(0);   //Progressbar to show when will the pacman win.
      bar.setBounds(260, 25, 210, 100);
      bar.setStringPainted(true);
      bar.setFont(new Font("MV Boli", Font.BOLD,25));
     
      this.setSize(WIDTH, HEIGHT);   // Add everything to the frame.
      this.setTitle("Pacman");
      this.setLocationRelativeTo(null);
      this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      this.setResizable(false);
      this.add(bar);
      this.add(liveLabel);
      this.getContentPane().setBackground(Color.black);
      this.addKeyListener(this);
      this.add(label);
      this.add(textJLabel);
      this.add(winLabel);
      this.add(gameLabel);
      this.add(instruction);
      this.add(maze);
      this.setVisible(true);
      
	}


	@Override
	public void keyTyped(KeyEvent e) {  //method not used
		// TODO Auto-generated method stub
	}

	
	@Override
	public void keyPressed(KeyEvent e) {   // Find the keycode of each key on keyboard to determine the direction.
		
		switch(e.getKeyCode()) {
		
		case 37: direction = "Left";
			
		break;
			
		case 38: direction = "Up";
	
		break;
		
		case 39: direction = "Right";

		break;
		
		case 40: direction = "Down";
}
	
		
	}

	@Override
	public void keyReleased(KeyEvent e) {  // method not used
		// TODO Auto-generated method stub
		
	}

	@Override
	
	public void actionPerformed(ActionEvent e) {  
		
		if (dot.gameOver() == false && pac.alive == true) {  // Only called when pacman is alive
		
			pac.checkLive();  //check pacman's live before each call
			maze.ghost.chase();   //Let ghost chase pacman.
			checkCollision();  //Check collision between ghost and pacman
			nextLevel();  //Check if pacman can move to next level.
			maze.repaint();  // repaint all the dots when pacman move to next level.
			if(direction.equals("Right")) {
				if (pac.canMoveRight() == true) {
					if (pac.pacX < WIDTH - 2.5 * pacmanUnit) {	//Restricting pacman's moving field.
						label.setLocation(label.getX()+pac.speedX, label.getY());
						pac.moveR(); // increment pacman's location
					}
				}
			}if (direction.equals("Left")) {
				if (pac.canMoveLeft() == true) {
					if (pac.pacX > pacmanUnit+10) {
						label.setLocation(label.getX()-pac.speedX, label.getY());
						pac.moveL(); // increment pacman's location
					}
				}
			}if (direction.equals("Up")) {
				if (pac.canMoveUp()==true) {
					if (pac.pacY > pacmanUnit+10) {
						label.setLocation(label.getX(), label.getY()-pac.speedY);
						pac.moveU(); // increment pacman's location
					}
				}
			}if(direction.equals("Down")) {
				if (pac.canMoveDown() == true) {	
					if (pac.pacY < HEIGHT-73) {
						label.setLocation(label.getX(), label.getY()+pac.speedY);
						pac.moveD(); // increment pacman's location
					}
				}
			}	
		}	
		indexRemove = -1; 
		checkIntersect();  //Checking the intersection between pacman and dots.
		removeIndex();	//if collides remove the index and dots.
	}
	
	public void removeIndex() {  // Remove dots when they collided
		
		if(indexRemove != -1 && maze.drawLevel1 == true) {
			maze.x_array.remove(indexRemove);  // remove the element of the arraylist that created dots.
			maze.y_array.remove(indexRemove);
		}else if (indexRemove != -1 && maze.drawLevel1 == false) { //Only called when pacman passed first level
			maze.x_array2.remove(indexRemove);  // The copy of x_array becasue I still need arraylist to create second level.
			maze.y_array2.remove(indexRemove);
		}
	}
	
	public void checkIntersect() {
		for (int i=0;i<maze.x_array.size();i++){
			if(pac.pacX <= maze.x_array.get(i)+space&&pac.pacX >= maze.x_array.get(i)-space&&  //if pacman intersects dots with a tolereance of "space"
				pac.pacY<=maze.y_array.get(i)+space&&pac.pacY >= maze.y_array.get(i)-space) {	
				dot.addScore();  //Add the score when dot is eaten
				indexRemove = i;	
				textJLabel.setText("Score: "+dot.score);	//Displaying score on the frame.
				bar.setValue((int)counter);  //Setting progressbar
				counter += increment;  //Increment the progress bar when dot is eaten.
				maze.repaint(); //Repaint the dots on the field
				}
			}
	 }

	

	public void checkCollision() { //collision with ghost
		
		if (pac.pacX > maze.ghost.gCoordX-1 &&pac.pacX <= maze.ghost.gCoordX+1 &&  //Condition when pacman intersects with ghost.
			(pac.pacY<=42|| pac.pacY>630)||(pac.pacX >= maze.ghost.g3XPosition-10&&  // The number here is to make the collision easier instead of exact coordinate
			pac.pacX<=maze.ghost.g3XPosition+10)&&
			pac.pacY>= maze.ghost.g3YPosition-7 && pac.pacY<=
			maze.ghost.g3YPosition+7)
		{	
			pac.lives -= 1;  //takes one live of pacman
			liveLabel.setText(": "+pac.lives);  //displaying remaining lives.
		}if (pac.lives == 0) {
			pac.alive = false;  //if pacman has no lives.
		    gameLabel.setText("Game over!");
		  
			
		}
	}
	
   public void nextLevel() {
	   if(dot.score == 115) {  //If pacman eats all dots it moves to next level.
		   winLabel.setText("Level: 2");
		   maze.ghost.level1 = false;
		   dot.score = 0;  //reset the score;
		   maze.x_array = maze.x_array2;  //Calling the copy of x_array because all the dots are removed after first level
		   maze.y_array = maze.y_array2;
		   maze.drawLevel1 = false;  //Telling dot painter to move to next level.
		   maze.repaint();
		   counter = 0;  //counter for progressbar is reset
	   }
   }


	
	
}
